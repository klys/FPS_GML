<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_Camera</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>1</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>{
    display_width = 1366 //display_get_width()
    display_height = 768 //display_get_height()

    //Declare Local Vars
    bearing=0 //used for horizontal mouse movement
    pitch=0 //used for vertical mouse movement

    //Used for mouse look calculations
    vector_x=0
    vector_y=0
    vector_z=0
    BobAngle=0

    //Set's the cameras viewing height
    z=20

    //Set's the cameras maximum movment speed
    max_speed = 2
    
    //camera/player starts on the ground
    onground = 1

    kick=0 //Var for gun recoil
    gun_h=-1.5 //Set's the guns horizontal offset in relation the the cameras centre, positive numbers move to the right and negative numbers move to the left
    global.fov=0
    gun_z=(global.fov/10) //Set's how far the gun is set from the player
    
    crouchz=0//
    recoil_climb=0//
    bash_rotation=0//
    bash_h=0//
    forward_bash=0//
    gun_z=0//
    gun_clip_z=0//
    arm_z=0//
    arm_h=0//
    z=0//
    aim = 2 //
    jump=0  //
    gun_fall_rol=0//
    recoilreset=0//
    recoil=0//
    ads=0//
    gun_rol=0//
    global.reloading=0//
    melee=0//
    manual_reload=0//
    giveaccback=0
    shooting_disabled=0
    setback=0//
    aftermath=0//
    clippedin=0//
    returning_bash=0
    d3d_start() //Start 3D Mode
    d3d_set_culling(true) //
    d3d_set_hidden(true) //Don't show hidden surfaces
    
    alarm[3] = 5 //viewdistance update
    screenshot=0
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//objects
view_distance(obj_crate)
view_distance(obj_barrel)
view_distance(obj_tree)
view_distance(obj_container)
view_distance(obj_pillar)
view_distance(obj_bush)
view_distance(obj_ak47_pickup)

//particles
view_distance_particle(obj_crate_piece)
view_distance_particle(obj_barrel_piece)
view_distance_particle(obj_scorch)
view_distance_particle(obj_barrelfire)
view_distance_particle(obj_groundfire)
view_distance_particle(obj_bushfire)
view_distance_particle(obj_brass)

alarm[3] = 5 //reset timer
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>recoilreset = 1
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>shooting_disabled = 0
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>jump = 0
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//falling debug, remove this to not make sound after falling without jumping
if air &gt; 0 then {
if not place_meeting(x,y,all) then {
if onground = 1 then {
    onground = 0
}}}

//jumapble objects
z_collision(obj_crate,10,'footstep_wood')
z_collision(obj_barrel,12,'footstep_metal')
z_collision(obj_container,48,'footstep_metal')
z_collision(obj_pillar,10,'footstep_tiles')
//walk through objects that will make sound such as bushes and pressure plates and so
z_collision_contact(obj_bush,16,'snd_leaves')

z_collision_slope()
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>direction=bearing //Change the direction to the cameras bearing
ex_audio_listener_set_position(x, y, z);//3d sound
//some smooth collision walking code
if z = 20 then {

    if (place_free(x+lengthdir_x(max_speed,direction),y)&amp;&amp;keyboard_check(ord('W'))){ x+=lengthdir_x(max_speed,direction); }
    if (place_free(x,y+lengthdir_y(max_speed,direction))&amp;&amp;keyboard_check(ord('W'))){ y+=lengthdir_y(max_speed,direction); }
    if (place_free(x+lengthdir_x(max_speed,direction+180),y)&amp;&amp;keyboard_check(ord('S'))){ x+=lengthdir_x(max_speed,direction+180); }
    if (place_free(x,y+lengthdir_y(max_speed,direction+180))&amp;&amp;keyboard_check(ord('S'))){ y+=lengthdir_y(max_speed,direction+180); }

    
    if (place_free(x+lengthdir_x(max_speed/2,direction-90),y)&amp;&amp;keyboard_check(ord('D'))){ x+=lengthdir_x(max_speed/2,direction-90); }
    if (place_free(x,y+lengthdir_y(max_speed/2,direction-90))&amp;&amp;keyboard_check(ord('D'))){ y+=lengthdir_y(max_speed/2,direction-90); }
    if (place_free(x+lengthdir_x(max_speed/2,direction+90),y)&amp;&amp;keyboard_check(ord('A'))){ x+=lengthdir_x(max_speed/2,direction+90); }
    if (place_free(x,y+lengthdir_y(max_speed/2,direction+90))&amp;&amp;keyboard_check(ord('A'))){ y+=lengthdir_y(max_speed/2,direction+90); }
    
} else {

    if keyboard_check(ord('W')){ x+=lengthdir_x(max_speed,direction); }
    if keyboard_check(ord('W')){ y+=lengthdir_y(max_speed,direction); }
    if keyboard_check(ord('S')){ x+=lengthdir_x(max_speed,direction+180); }
    if keyboard_check(ord('S')){ y+=lengthdir_y(max_speed,direction+180); }

    if keyboard_check(ord('D')){ x+=lengthdir_x(max_speed/2,direction-90); }
    if keyboard_check(ord('D')){ y+=lengthdir_y(max_speed/2,direction-90); }
    if keyboard_check(ord('A')){ x+=lengthdir_x(max_speed/2,direction+90); }
    if keyboard_check(ord('A')){ y+=lengthdir_y(max_speed/2,direction+90); }
}

//activate jump
if keyboard_check_pressed(vk_space) {
    if jump = 0 then {
    if onground = 1 then {
        jump = 1
        onground = 0
    }}
}   

//jump in the air for 20 steps
if jump =  1 then {
    alarm[0] = 20
    z += 2
}

//gravity
if z &gt; 20 then {
    z -= 0.2+air
    air+=global.fall_rate
}

//if you land after a jump, it will make a sound.
if z &lt; 21 then {
if onground = 0 then {
    onground = 1
    if Obj_Camera.x &lt; 220 then {
        global.footstep_on_floor = "footstep_tiles"
    } else {
        global.footstep_on_floor = "footstep_grass"
    }
    global.footstep_kind = global.footstep_on_floor
    ex_audio_play(global.footstep_on_floor)
}}

//debug, if you ever come beneath 20z it will reset to 20.
if z &lt; 21 then {
    jump = 0
    z = 20
    air = 0
}

//if you're falling the gun will point slighty up
if not keyboard_check(vk_shift) then {
if onground = 0 then {
    if gun_fall_rol &gt; -10 then {gun_fall_rol -= 0.1}
} else {
    if gun_fall_rol &lt; 0 then {gun_fall_rol += 1}
    if gun_fall_rol &gt; 0 then {gun_fall_rol = 0}
}
}


//gun spray reset
if recoilreset = 1 then {
    if global.spray &gt; 0 then {
       global.spray -= 1 
    }
}

//sprint code
if recoil = 0 then { //check if you are shooting (if you shoot there is recoil)
if onground = 1 then {  //check if you're on the ground, you can not sprint while mid-air
if keyboard_check(ord('W')) or keyboard_check(ord('S')) or keyboard_check(ord('A')) or keyboard_check(ord('D')) then {
if keyboard_check_pressed(vk_shift) then {
    obj_controller.alarm[0] = 1 //using shift pressed otherwise it will spamming the alarm[0]
} 
if keyboard_check(vk_shift) then { // if shift is being hold down, sprint.
    if ads = 1 then {max_speed = 2} else {max_speed = 4}
    if ads = 1 then {global.walk_speed = 40} else {global.walk_speed = 20}
    if ads = 0 then {if gun_rol &lt; 10 then {gun_rol += 2}}
}}}}

//turning back to normal values after sprint
if recoil = 0 then {
if not keyboard_check(vk_shift) then {   
    if ads = 1 then {max_speed = 1} else {max_speed = 2}
    if ads = 1 then {global.walk_speed = 60} else {global.walk_speed = 40}
    if ads = 0 then {if gun_rol &gt; 0 then {gun_rol -= 2}}
}}


//gun bobble (gun walking animation)
if onground = 1 then {
if keyboard_check(ord('W')) or keyboard_check(ord('S')) or keyboard_check(ord('A')) or keyboard_check(ord('D')) then {
    if keyboard_check(vk_shift) then {
        if ads = 1 then {
            bobble_strenght = 4
        } else {
            bobble_strenght = 16
        }
    } else {
        if ads = 1 then {
            bobble_strenght = 2
        } else {
            bobble_strenght = 8
        }
    }
} else {
    if ads = 1 then {
        bobble_strenght = 1
    } else {
        bobble_strenght = 2
    }
}
} else {
    bobble_strenght = 0.5
}

//Aim down the sight, and some gun adjustments to fit propperly
if global.reloading = 0 then {
if mouse_check_button(mb_right) then {
    if gun_rol &gt; 0 then {gun_rol -= 2}
    if aim &gt; 0 then {
        aim -= 0.5  //make the gun go to the center
        gun_z -= 0.2    
        gun_h += 0.125
        if giveaccback = 0 then {  
            acc = global.gun_stat_accuracy
            global.gun_stat_accuracy = 0
            giveaccback = 1
        }
        if aim = 0 then {
            ads = 1
        }
    }
} else {
    if aim &lt; 2 then {
        aim += 0.5 //make the gun to it's original position
        gun_z += 0.2
        gun_h -= 0.125
        if giveaccback = 1 then {
            global.gun_stat_accuracy = acc
            giveaccback = 0
        }  
        if aim = 2 then {
            ads = 0
        }
    }
}
}

//recoil
if recoil = 1 then {
    if setback = 0 then {
        if kick &lt; global.gun_stat_recoil*4 then {
            kick += global.gun_stat_recoil                //recoil kick
            recoil_climb += global.gun_stat_recoil_climb //the gun will slighty go up
        }
        if kick = global.gun_stat_recoil*4 then { //make the recoil limit fourtimes the recoil it's givin)
            setback = 1
        }
    }
    
    //setting back the recoil to zero
    if setback = 1 then {
        if kick &gt; 0 then {
            kick -= global.gun_stat_recoil
            recoil_climb -= global.gun_stat_recoil_climb
        }
        
        //reset value's
        if kick = 0 then {
            recoil = 0
            setback = 0
        }
    }

}

//melee
if melee = 1 then {
    if returning_bash = 0 then {
    if bash_rotation &lt; 90 then {
        bash_rotation += 9  //gun will turn up
        forward_bash -= 1   //because of the gun's drawing value's the gun must be brought to you
        bash_h -= 0.8       //adjust the gun height
    }}
    
    if bash_rotation = 90 then {
        returning_bash = 1
    }
    
    //resetting the bash back to zero
    if returning_bash = 1 then {
        if bash_rotation &gt; 0 then {
            bash_rotation -= 4.5
            forward_bash += 0.5
            bash_h += 0.4
        }
        if bash_rotation = 0 then {
            returning_bash = 0
            forward_bash = 0
            melee = 0
        }
    }   
    
}

//check for reloads
if global.gun = global.model_ak47 then { 
if global.ak47_bullets = 0 then {       //check if the gun is empty
if global.ak47_ammo &gt; 0 then {          //check if you have any ammo
if global.reloading = 0 then {          //check if you're not already reloading
    clipin = 0 ; timer = 0 ; armmoved = 0 ; gotbullets = 0
    global.reloading = 1
    ex_audio_play("snd_clipout",false)    
}
//activate automatic reloading (if you're gun is empty)
if global.reloading = 1 then {
    gun_reload()
}}}}

//activate manual reloading (if you pressed R)
if manual_reload = 1 then {
    gun_reload_r()
}




</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="55">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//activate melee attack if available
if melee = 0 then {                     //check if you're not already bashing
if recoil = 0 then {                    //check if you're not shooting
if global.reloading = 0 then {          //check if you're not reloading
if not keyboard_check(vk_shift) then {  //check if you're not sprinting
    melee = 1   //activate melee
}}}}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="53">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//some extra, if you're gun is empty it will make a clicking noise
if global.ak47_bullets = 0 then {
    ex_audio_play("snd_click",false)
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="50">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if shooting_disabled = 0 then {             //check if you're not already shooting
if global.reloading = 0 then {              //check if you're not already reloading
if global.gun = global.model_ak47 then {    //check the gun model fo the corresponding bullets and flash
if global.ak47_bullets &gt; 0 then {    
    instance_create(x,y,obj_bullet)       
    instance_create(x,y,obj_ak47_flash)
    global.ak47_bullets -= 1
    fired = 1
}}}}


    //global shooting variables (used for every gun)
    //some variables are from the gun stats (check obj_variables in folder: controllers)
    if fired = 1 then {
        alarm[2] = 10 //recoil reset
        if global.spray &lt; global.gun_stat_accuracy*2 then {global.spray += aim}     //this make sure that the gun has not to muche spray
        if ads = 1 then {global.spray = 0}      //if you're aiming down the sight there is no spray
        alarm[1] = global.gun_stat_firerate     //firerate of the gun (gun stat)
        shooting_disabled = 1                   //disable shooting
        if global.brass = 1 then {instance_create(x-random(4)+random(4),y-random(4)+random(4),obj_brass)} //eject bulletshell if available
        ex_audio_play(global.gun_stat_sound,false) //playe the corrisponding sound
        recoil = 1          //--|
        gun_rol = 0         //--|
        bash_rotation = 0   //--|
        forward_bash = 0    //--|&gt;------ some debugging variables
        bash_h = 0          //--|
        fired = 0           //--|
        recoilreset = 0     //--|
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//with this little code together with the intersect boundary, you can't leave the room area.
x=xprevious
y=yprevious
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>{
    bearing -= (display_mouse_get_x() -display_get_width()/2)/global.sensitivity //This get's horizontal mouse movement
    pitch += (display_mouse_get_y() -display_get_height()/2)/global.sensitivity //This get's vertical mouse movement
    pitch = max(min(pitch,80),-80) //This limits camera pitch -is up, + is down
  
    ss = sin(degtorad(bearing))
    cc = cos(degtorad(bearing))
    
    vector_x=cc*cos(degtorad(-pitch))
    vector_y=ss*-cos(degtorad(-pitch))
    vector_z=sin(degtorad(-pitch))
    
    //The below is used to make the gun bobble
    bobble_distance = bobble_strenght/100
    BobAngle=(BobAngle+360+bobble_strenght) mod 360
    BobZ=z+lengthdir_x(bobble_distance,BobAngle)-crouchz

        //Draw what the camera can see
        d3d_set_projection_ext(x,y,BobZ,x+vector_x,y+vector_y,BobZ+vector_z,0,0,1,45,display_width/display_height,1,16000)

    //Gun Transformations and Drawing, MUST be drawn after the camera.
    d3d_transform_set_identity()
    d3d_transform_add_rotation_y(-pitch-gun_rol+recoil_climb+bash_rotation-gun_fall_rol)
    d3d_transform_add_rotation_z(bearing)
    d3d_transform_add_translation(x,y,z)
    
    //draw the gun models, the model that are used is based on the gun stats, for example: AK-47
    d3d_model_draw(global.gun,gun_z-kick+forward_bash,aim,gun_h+bash_h,background_get_texture(global.gun_texture))
    d3d_model_draw(global.gun_clip,gun_z-kick+forward_bash,aim,gun_h-gun_clip_z+bash_h,background_get_texture(global.gun_texture))
    d3d_model_draw(global.gun_arm,gun_z-kick+forward_bash-arm_h,aim,gun_h-gun_clip_z+bash_h-arm_z,background_get_texture(global.gun_arm_texture))
    d3d_model_draw(global.gun_arm2,gun_z-kick+forward_bash,aim,gun_h+bash_h,background_get_texture(global.gun_arm_texture))
    
    d3d_transform_set_identity()

    //Set the mouse back to the screens center, this is important so you don't click outside the game window
    display_mouse_set(display_get_width()/2,display_get_height()/2)
     
    //Set drawing color back to white just incase
    draw_set_color(c_white)
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="82">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//activate manual reload if available
if global.gun = global.model_ak47 then {       //check what gun you are using and based in this use those variables. 
if global.ak47_bullets &lt; 30 then {
if global.ak47_ammo &gt; 0 then {
if global.reloading = 0 then { 
    clipin = 0 ; timer = 0 ; armmoved = 0 ; gotbullets = 0 //some debugging reset value's
    global.reloading = 1        //activate reload
    manual_reload = 1           
    ex_audio_play('snd_clipout',false)    
}}}}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="46">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///delete this
//make screenshot
screen_save(working_directory + "screenshot "+string(screenshot))
screenshot+=1

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
